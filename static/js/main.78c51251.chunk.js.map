{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","_slicedToArray","myStyle","setmyStyle","_useState3","_useState4","btnText","setbtnText","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","onClick","border","Navbar","props","concat","mode","href","title","aria-label","aria-current","AboutText","toggleMode","role","aria-checked","htmlFor","TextForm","text","setText","Fragment","heading","rows","value","onChange","event","target","placeholder","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","filter","element","Alert","height","alert","msg","App","setAlert","message","setTimeout","setMode","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.78c51251.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setmyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    const [btnText, setbtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    const toogleStyle = ()=> {\r\n        if(myStyle.color === 'black'){\r\n            setmyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            setbtnText(\"Enable Light Mode\")\r\n        }\r\n        else {\r\n            setmyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setbtnText(\"Enable Dark Mode\")\r\n\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n     <h2 className=\"my-3\">About Us</h2>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n             <div className=\"accordion-item\">\r\n                 <h2 className=\"accordion-header\">\r\n                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                        Accordion Item #1\r\n                    </button>\r\n                 </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n                 </div>\r\n                    <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-3\"> \r\n        <button onClick={toogleStyle} type=\"button\" className=\"btn btn-info\">{btnText}</button>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link\" href=\"#\">{props.AboutText}</a>\r\n          </li>\r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n             <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" aria-checked=\"true\" id=\"flexSwitchCheckDefault\"/>\r\n             <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string,\r\n                    AboutText: PropTypes.string\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleupclick = ()=> {\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UpperCase\",\"success\")\r\n    }\r\n\r\n    const handledownclick = ()=> {\r\n        let newText = text.toLowerCase()\r\n        setText(newText) \r\n        props.showAlert(\"Converted to LowerCase\",\"success\")\r\n    }\r\n\r\n    const clear = ()=> {\r\n      setText(\"\") \r\n  }\r\n\r\n    const handleonchange = (event)=> {\r\n        setText(event.target.value)\r\n    }\r\n\r\n  const[text, setText] = useState('');\r\n  return (\r\n    <>\r\n    <div className=\"container\">\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value = {text} onChange = {handleonchange} placeholder=\"Write Here\" style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'black'}}></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleupclick}>Convert to Uppercase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handledownclick}>Convert to Lowercase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={clear}>Clear All</button>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n      <h1>Your Text Summary</h1>\r\n      <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} Words and {text.length} characters</p>\r\n    </div>\r\n    </>\r\n  )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport './App.css';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\nimport React,{ useState } from 'react';\n\nfunction App() {\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type)=> {\n      setAlert({\n        msg : message,\n        type : type\n      })\n      setTimeout(() => {\n        setAlert(null)\n      },2000);\n  }\n\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = ()=> {\n    if(mode ==='light') {\n      setMode('dark')\n      document.body.style.backgroundColor = 'grey'\n      showAlert(\"Dark mode has been enabled\", \"success\")\n    }else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode has been enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n      <Navbar title='Textutils' AboutText='About Us' mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n          <TextForm showAlert={showAlert} heading=\"Enter Text Here\" mode={mode}/>  \n      </div>\n      <div>\n         <About/>\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}